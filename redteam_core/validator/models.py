from typing import Optional

from pydantic import BaseModel


class ScoringLog(BaseModel):
    score: Optional[float] = 0.0
    miner_input: Optional[dict] = None
    miner_output: Optional[dict] = None
    error: Optional[str] = None
    baseline_score: Optional[float] = None


class ComparisonLog(BaseModel):
    similarity_score: Optional[float] = 0.0
    miner_input: Optional[dict] = None
    miner_output: Optional[dict] = None
    reference_output: Optional[dict] = None
    error: Optional[str] = None


class MinerChallengeCommit(BaseModel):
    # Basic information
    miner_uid: Optional[int] = None
    miner_hotkey: Optional[str] = None
    challenge_name: Optional[str] = None
    docker_hub_id: Optional[str] = None
    commit_timestamp: Optional[float] = None
    encrypted_commit: Optional[str] = None
    key: Optional[str] = None
    commit: Optional[str] = None

    # Scoring logs with input generated by controller
    scoring_logs: list[ScoringLog] = []

    # Comparision logs, this dict map reference commit 's encrypted_commit to comparison log
    comparison_logs: dict[str, list[ComparisonLog]] = {}

    # Final score and penalty for this miner's commit
    score: Optional[float] = None
    penalty: Optional[float] = None

    # Accepted by having penalty less than threshold
    accepted: Optional[bool] = None

    def public_view(self) -> "MinerChallengeCommit":
        """Returns a new instance with sensitive fields (scoring logs, comparison logs) removed."""
        return MinerChallengeCommit(                                                                                  
            miner_uid=self.miner_uid,
            miner_hotkey=self.miner_hotkey,
            challenge_name=self.challenge_name,
            docker_hub_id=self.docker_hub_id,
            commit_timestamp=self.commit_timestamp,
            encrypted_commit=self.encrypted_commit,
            key=self.key,
            commit=self.commit,
            score=self.score,
            penalty=self.penalty,
            accepted=self.accepted,
        )